# ────────────────────────────────────────────────────────────────────────────────
# 📌 afksudoku.py — Le bot joue un Sudoku tout seul
# Catégorie : Fun&Random
# Accès : Tous
# Cooldown : 1 utilisation / 10 secondes / utilisateur
# ────────────────────────────────────────────────────────────────────────────────

import discord
import asyncio
import random
from discord import app_commands
from discord.ext import commands
from utils.discord_utils import safe_send

# ────────────────────────────────────────────────────────────────────────────────
# 🎨 Fonctions utilitaires
# ────────────────────────────────────────────────────────────────────────────────

def generate_sudoku():
    """Crée une grille Sudoku 9x9 avec quelques cases vides."""
    grid = [[0 for _ in range(9)] for _ in range(9)]
    nums = list(range(1, 10))
    for i in range(9):
        random.shuffle(nums)
        grid[i] = nums.copy()
    for _ in range(45):  # environ moitié vide
        r, c = random.randint(0, 8), random.randint(0, 8)
        grid[r][c] = 0
    return grid


def render_grid(grid, highlight=None):
    """Affiche la grille avec des emojis."""
    emojis = ["⬜", "1️⃣", "2️⃣", "3️⃣", "4️⃣", "5️⃣", "6️⃣", "7️⃣", "8️⃣", "9️⃣"]
    lines = []
    for r in range(9):
        row = ""
        for c in range(9):
            val = grid[r][c]
            cell = emojis[val] if val != 0 else "⬛"
            if highlight and (r, c) == highlight:
                cell = f"🟩{cell}🟩"
            row += cell
        lines.append(row)
    return "\n".join(lines)


async def fill_sudoku(grid, send_func):
    """Remplit la grille étape par étape."""
    empty_cells = [(r, c) for r in range(9) for c in range(9) if grid[r][c] == 0]
    random.shuffle(empty_cells)

    # Pour limiter le spam d’édition, on met à jour toutes les 3 cases
    buffer = []
    for (r, c) in empty_cells:
        grid[r][c] = random.randint(1, 9)
        buffer.append((r, c))

        if len(buffer) >= 3:
            await asyncio.sleep(0.5)
            await send_func(f"🧩 **AFK Sudoku en cours...**\n{render_grid(grid, highlight=buffer[-1])}")
            buffer = []

    await send_func(f"✅ **AFK Sudoku terminé !**\n{render_grid(grid)}")

# ────────────────────────────────────────────────────────────────────────────────
# 🧠 Cog principal
# ────────────────────────────────────────────────────────────────────────────────

class AfkSudoku(commands.Cog):
    """Commande /afksudoku et !afksudoku — Le bot joue un Sudoku tout seul"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    async def visualize_sudoku(self, target):
        """Affiche et remplit le Sudoku, peu importe le type de commande."""
        grid = generate_sudoku()
        msg = None

        async def send(content):
            nonlocal msg
            try:
                if isinstance(target, discord.Interaction):
                    # Envoie via followup
                    if msg:
                        await msg.edit(content=content)
                    else:
                        msg = await target.followup.send(content=content, wait=True)
                else:
                    # Envoie dans un salon texte
                    if msg:
                        await msg.edit(content=content)
                    else:
                        msg = await safe_send(target, content)
            except discord.Forbidden:
                pass  # pas la permission d’envoyer
            except discord.HTTPException:
                pass  # rate limit ou erreur Discord

        await send(f"🧩 **AFK Sudoku** — le bot commence à jouer...\n{render_grid(grid)}")
        await fill_sudoku(grid, send)

    # ────────────────────────────────────────────────────────────────────────────
    # 🔹 Commande SLASH
    # ────────────────────────────────────────────────────────────────────────────
    @app_commands.command(
        name="afksudoku",
        description="Le bot remplit un Sudoku tout seul, case par case."
    )
    @app_commands.checks.cooldown(1, 10.0, key=lambda i: i.user.id)
    async def slash_afksudoku(self, interaction: discord.Interaction):
        await interaction.response.defer(thinking=True)
        await self.visualize_sudoku(interaction)

    # ────────────────────────────────────────────────────────────────────────────
    # 🔹 Commande PREFIX
    # ────────────────────────────────────────────────────────────────────────────
    @commands.command(name="afksudoku")
    @commands.cooldown(1, 10.0, commands.BucketType.user)
    async def prefix_afksudoku(self, ctx: commands.Context):
        await self.visualize_sudoku(ctx.channel)


# ────────────────────────────────────────────────────────────────────────────────
# 🔌 Setup du Cog
# ────────────────────────────────────────────────────────────────────────────────

async def setup(bot: commands.Bot):
    cog = AfkSudoku(bot)
    for command in cog.get_commands():
        if not hasattr(command, "category"):
            command.category = "Fun&Random"
    await bot.add_cog(cog)
